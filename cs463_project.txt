FILENAME: cs463_project.txt
STUDENT NAME: DANIEL LEDWITH
STUDENT UIN: 01265466
DATE: 11/28/2023

PROGRAM DESCRIPTION: 
This is my project submission for CS463. 
This program applies several encryption/decryption methods covered during the semester - 
namely Caesar cipher, affine cipher, linear-feedback shift register (LFSR), DES, RSA, and Elgamal. 
All encryption methods were defined by me, using concepts covered in this class. 
I do not use any outside cryptography libraries to facilitate the encryption or decryption.
This program is intended to demonstrate my understanding of the subject matter and my ability to apply it.

HOW TO RUN THE PROGRAM:
This is a console application. It is to be run in a terminal window.
From terminal window, navigate to the directory that contains cs463.py
Enter the following command to launch the program: 
python3 cs463.py

On Windows, you should use the following command:
python cs463.py

When the program is launched, it prompts the user to enter a short message to be encrypted.
While the program will accept messages of decent length (I tested messages as long as 8,058 characters (including spaces) and did not encounter any problems), 
pressing the enter key will trigger encryption to begin. 
So the message can't contain a new line character. 
This is intentional, and the program was designed with relatively short messages in mind. 

Once the user enters a message (press enter to submit), the program will prompt the user to select an encryption method from a list. 
The user should decide which encryption method to use, and enter the corresponding number to the console -- 1, 2, 3, 4, 5, or 6 (again, press enter to submit). 
The program will then encrypt the message using the selected encryption method and print the original message (plaintext) and the encrypted message (ciphertext) to the console.
The program will then decrypt the encrypted message back to the original message and print the encrypted message (ciphertext) and the decrypted messaged (plaintext) to the console.

The user may continue encrypting messages by entering Y when prompted to continue, or any other character to exit the program.

A note on acceptable characters:
Acceptable characters include entries 32 - 126 of the standard ASCII table. Below is a comprehensive list.

32: SPACE	56: 8		80: P		104: h
33: !		57: 9		81: Q		105: i
34: "		58: :		82: R		106: j
35: #		59: ;		83: S		107: k
36: $		60: <		84: T		108: l
37: %		61: =		85: U		109: m
38: &		62: >		86: V		110: n
39: '		63: ?		87: W		111: o
40: (		64: @		88: X		112: p
41: )		65: A		89: Y		113: q
42: *		66: B		90: Z		114: r
43: +		67: C		91: [		115: s
44: ,		68: D		92: \		116: t
45: -		69: E		93: ]		117: u
46: .		70: F		94: ^		118: v
47: /		71: G		95: _		119: w
48: 0		72: H		96: `		120: x
49: 1		73: I		97: a		121: y
50: 2		74: J		98: b		122: z
51: 3		75: K		99: c		123: {
52: 4		76: L		100: d		124: |
53: 5		77: M		101: e		125: }
54: 6		78: N		102: f		126: ~
55: 7		79: O		103: g		

This makes for a set of 95 characters with index beginning at 32. Due to this, my source code for caesar and affine ciphers uses modulo 95 and +/- 32 when shifting characters.
If a message contains a character not listed above, the program will alert the user and the user will have to start over.

SAMPLE RUN:
For a sample run of the program, please refer to sample_run.pdf

Sources referenced:
Encryption functions based on concepts covered in the modules for this course and Paar and Pelzl's "Understanding Cryptography"
ASCII values: https://www.asciitable.com/
Randomly-generated large primes: https://asecuritysite.com/encryption/getprimen

